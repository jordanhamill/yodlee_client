# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from yodlee.configuration import Configuration


class UpdateCategoryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'high_level_category_name': 'str',
        'id': 'int',
        'source': 'str',
        'category_name': 'str'
    }

    attribute_map = {
        'high_level_category_name': 'highLevelCategoryName',
        'id': 'id',
        'source': 'source',
        'category_name': 'categoryName'
    }

    def __init__(self, high_level_category_name=None, id=None, source=None, category_name=None, _configuration=None):  # noqa: E501
        """UpdateCategoryRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._high_level_category_name = None
        self._id = None
        self._source = None
        self._category_name = None
        self.discriminator = None

        if high_level_category_name is not None:
            self.high_level_category_name = high_level_category_name
        self.id = id
        self.source = source
        if category_name is not None:
            self.category_name = category_name

    @property
    def high_level_category_name(self):
        """Gets the high_level_category_name of this UpdateCategoryRequest.  # noqa: E501


        :return: The high_level_category_name of this UpdateCategoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._high_level_category_name

    @high_level_category_name.setter
    def high_level_category_name(self, high_level_category_name):
        """Sets the high_level_category_name of this UpdateCategoryRequest.


        :param high_level_category_name: The high_level_category_name of this UpdateCategoryRequest.  # noqa: E501
        :type: str
        """

        self._high_level_category_name = high_level_category_name

    @property
    def id(self):
        """Gets the id of this UpdateCategoryRequest.  # noqa: E501


        :return: The id of this UpdateCategoryRequest.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateCategoryRequest.


        :param id: The id of this UpdateCategoryRequest.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                id is not None and id < 1):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def source(self):
        """Gets the source of this UpdateCategoryRequest.  # noqa: E501


        :return: The source of this UpdateCategoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this UpdateCategoryRequest.


        :param source: The source of this UpdateCategoryRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501
        allowed_values = ["SYSTEM", "USER"]  # noqa: E501
        if (self._configuration.client_side_validation and
                source not in allowed_values):
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def category_name(self):
        """Gets the category_name of this UpdateCategoryRequest.  # noqa: E501


        :return: The category_name of this UpdateCategoryRequest.  # noqa: E501
        :rtype: str
        """
        return self._category_name

    @category_name.setter
    def category_name(self, category_name):
        """Sets the category_name of this UpdateCategoryRequest.


        :param category_name: The category_name of this UpdateCategoryRequest.  # noqa: E501
        :type: str
        """

        self._category_name = category_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateCategoryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateCategoryRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateCategoryRequest):
            return True

        return self.to_dict() != other.to_dict()
