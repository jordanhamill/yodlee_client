# coding: utf-8

"""
    Yodlee Core APIs

    This file describes the Yodlee Platform APIs using the swagger notation. You can use this swagger file to generate client side SDKs to the Yodlee Platform APIs for many different programming languages. Yodlee supports the Java SDK and it is available <a href=\"https://developer.yodlee.com/java-sdk-overview \">here</a>. You can generate a client SDK for Python, Java, JavaScript, PHP, or other languages according to your development needs. For more details about the APIs, refer to <a href=\"https://developer.yodlee.com/docs/api/1.1/Overview\">Yodlee API v1.1 - Overview</a>.<br><br>You will have to set the header before making the API call. The following headers apply to all the APIs:<ul><li>Authorization: This header holds the access token</li> <li> Api-Version: 1.1</li></ul><b>Note</b>: If there are any API-specific headers, they are mentioned explicitly in the respective API's description.  # noqa: E501

    OpenAPI spec version: 1.1.0
    Contact: developer@yodlee.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from yodlee.configuration import Configuration


class EnrichUserData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user': 'list[EnrichDataUser]',
        'account': 'list[EnrichDataAccount]',
        'transaction': 'list[EnrichDataTransaction]'
    }

    attribute_map = {
        'user': 'user',
        'account': 'account',
        'transaction': 'transaction'
    }

    def __init__(self, user=None, account=None, transaction=None, _configuration=None):  # noqa: E501
        """EnrichUserData - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user = None
        self._account = None
        self._transaction = None
        self.discriminator = None

        self.user = user
        self.account = account
        self.transaction = transaction

    @property
    def user(self):
        """Gets the user of this EnrichUserData.  # noqa: E501


        :return: The user of this EnrichUserData.  # noqa: E501
        :rtype: list[EnrichDataUser]
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this EnrichUserData.


        :param user: The user of this EnrichUserData.  # noqa: E501
        :type: list[EnrichDataUser]
        """
        if self._configuration.client_side_validation and user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def account(self):
        """Gets the account of this EnrichUserData.  # noqa: E501


        :return: The account of this EnrichUserData.  # noqa: E501
        :rtype: list[EnrichDataAccount]
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this EnrichUserData.


        :param account: The account of this EnrichUserData.  # noqa: E501
        :type: list[EnrichDataAccount]
        """
        if self._configuration.client_side_validation and account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def transaction(self):
        """Gets the transaction of this EnrichUserData.  # noqa: E501


        :return: The transaction of this EnrichUserData.  # noqa: E501
        :rtype: list[EnrichDataTransaction]
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this EnrichUserData.


        :param transaction: The transaction of this EnrichUserData.  # noqa: E501
        :type: list[EnrichDataTransaction]
        """
        if self._configuration.client_side_validation and transaction is None:
            raise ValueError("Invalid value for `transaction`, must not be `None`")  # noqa: E501

        self._transaction = transaction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnrichUserData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnrichUserData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnrichUserData):
            return True

        return self.to_dict() != other.to_dict()
